name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ci:
    name: Build on ${{ matrix.platform }} (pwsh)
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Git repository
        uses: actions/checkout@main

      - name: Install PSScriptAnalyzer module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Settings PSScriptAnalyzerSettings.psd1 -Path . -Recurse -OutVariable issues

          $errors = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})

          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          }
          else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }

      - name: Install Pester module
        shell: pwsh
        run: |
          Install-Module Pester -Force -SkipPublisherCheck -ErrorAction Stop

      - name: Run Pester tests
        shell: pwsh
        run: |
          ./Invoke-Tests.ps1 -TestType All -OutputFormat Normal

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Tests failed with exit code $LASTEXITCODE" -ErrorAction Stop
          }

      - name: Upload test results
        uses: actions/upload-artifact@main
        if: always()
        with:
          name: test-results-${{ matrix.platform }}
          path: testresults.xml

  ci-powershell-desktop:
    name: Build on windows-latest (powershell)
    runs-on: windows-latest

    steps:
      - name: Checkout Git repository
        uses: actions/checkout@main

      - name: Install PSScriptAnalyzer module
        shell: powershell
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -ErrorAction Stop

      - name: Run PSScriptAnalyzer
        shell: powershell
        run: |
          Invoke-ScriptAnalyzer -Settings PSScriptAnalyzerSettings.psd1 -Path . -Recurse -OutVariable issues

          $errors = $issues.Where({$_.Severity -eq 'Error'})
          $warnings = $issues.Where({$_.Severity -eq 'Warning'})

          if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
          }
          else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
          }

      - name: Install Pester module
        shell: powershell
        run: |
          Install-Module Pester -Force -SkipPublisherCheck -ErrorAction Stop

      - name: Run Pester tests
        shell: powershell
        run: |
          .\Invoke-Tests.ps1 -TestType All -OutputFormat Normal
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Tests failed with exit code $LASTEXITCODE" -ErrorAction Stop
          }

      - name: Upload test results
        uses: actions/upload-artifact@main
        if: always()
        with:
          name: test-results-windows-desktop
          path: testresults.xml
